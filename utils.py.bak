from datetime import datetime as dt
import js
import time

def get_element_by_id(element_id):
    return js.document.getElementById(element_id)

def log(o):
    js.console.log(o)

def format_date(dt_, fmt = "%m/%d/%Y, %H:%M:%S"):
    return dt_.strftime(fmt)

def now(fmt = "%m/%d/%Y, %H:%M:%S"):
    return format_date(dt.now(), fmt)

def remove_class(element, className):
    element.element.classList.remove("line-through")

def add_class(element, className):
    element.element.classList.add("line-through")

async def get_file_selector_files_by_element_id(element_id,process_file_callback=None):
    # let reader = new FileReader()
    # reader.readAsDataURL(file);
    # reader.onloadend = function() {
    #     data = JSON.stringify({"data":[ reader.result ]})
    #     post = { method: "POST", body: data, headers: { "Content-Type": "application/json" } }
    #     fetch(url, post)
    file_selector = get_element_by_id(element_id=element_id)
    num_files = file_selector.files.length
    files = []
    for file in file_selector.files:
        def proc_file(file):
            reader = js.FileReader.new()
            async def file_read_callback(*args,**kwargs):
                log('callback called...')
                if process_file_callback is not None:
                    # await process_file_callback(file)
                    await process_file_callback(reader.result)
                # files.append(reader.result)
                # log(len(files))
                # if process_file_callback is not None and len(files) == num_files:
                #     process_file_callback(files)
            reader.readAsDataURL(file)
            reader.onloadend = file_read_callback
            return True
        # _ = await proc_file(file)
        proc_file(file)
        log('file read')
    log('num files loaded: '+str(len(files)))
    # return files

